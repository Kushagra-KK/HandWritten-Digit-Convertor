# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lf8Yylr1P0RBpgVC5hNVb234Ntco4iJh
"""

# First mount Google Drive
from google.colab import drive
drive.mount('/content/drive')
!pip install --upgrade pip uv
!pip install streamlit tensorflow numpy matplotlib pyngrok
import streamlit as st
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import os

# Use a CPU-compatible model format
try:
    # Try to load TensorFlow model (if available)
    import tensorflow as tf
    generator = tf.keras.models.load_model('/content/drive/MyDrive/mnist_dcgan_generator.h5')
    use_tf = True
except:
    # Fallback to pre-generated images
    use_tf = False

# App title
st.title('Handwritten Digit Generator')

# Digit selection
digit = st.selectbox('Select digit to generate', options=list(range(10)))
num_images = st.slider('Number of images', 1, 10, 5)

if st.button('Generate Images'):
    if use_tf:
        # Create latent vectors with digit conditioning
        latent_vectors = np.random.randn(num_images, 100)

        # Add digit conditioning
        latent_vectors[:, :10] = 0
        latent_vectors[:, digit] = 1

        # Generate images
        generated_images = generator.predict(latent_vectors)
    else:
        # Fallback: Use pre-generated MNIST images
        from sklearn.datasets import fetch_openml
        mnist = fetch_openml('mnist_784', version=1, as_frame=False)
        images = mnist.data.reshape(-1, 28, 28)
        labels = mnist.target.astype(int)

        # Filter images for selected digit
        digit_images = images[labels == digit]
        generated_images = digit_images[:num_images]
        generated_images = generated_images[..., np.newaxis]  # Add channel dimension

    # Display images in a grid
    st.subheader(f"Generated images of digit {digit}")
    cols = st.columns(5)

    for i, img in enumerate(generated_images):
        with cols[i % 5]:
            fig, ax = plt.subplots(figsize=(2, 2))
            ax.imshow(img[:, :, 0] if img.ndim == 3 else img, cmap='gray')
            ax.axis('off')
            st.pyplot(fig)
            plt.close(fig)
